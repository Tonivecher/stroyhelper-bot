import logging
import asyncio
import os
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from ai_helper import AIHelper
from material_calculator import MaterialCalculation, MaterialUnit
from dataclasses import dataclass
from enum import Enum
from typing import List, Optional, Dict, Union
import shopping_list

# –¢–∏–ø—ã –ø–æ–º–µ—â–µ–Ω–∏–π
class RoomType(Enum):
    KITCHEN = "–ö—É—Ö–Ω—è"
    BEDROOM = "–°–ø–∞–ª—å–Ω—è"
    LIVING_ROOM = "–ì–æ—Å—Ç–∏–Ω–∞—è"
    BATHROOM = "–í–∞–Ω–Ω–∞—è"
    CUSTOM = "–î—Ä—É–≥–æ–µ"

# –§–æ—Ä–º—ã –ø–æ–º–µ—â–µ–Ω–∏–π
class RoomShape(Enum):
    RECTANGULAR = "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è"
    SQUARE = "–ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è"
    CIRCULAR = "–ö—Ä—É–≥–ª–∞—è"
    CUSTOM = "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è"

# –î–∞–Ω–Ω—ã–µ –æ –ø–æ–º–µ—â–µ–Ω–∏–∏
@dataclass
class RoomData:
    room_type: RoomType
    shape: RoomShape
    length: Optional[float] = None
    width: Optional[float] = None
    height: float = 2.5
    diameter: Optional[float] = None
    windows: List[Dict[str, float]] = None
    doors: List[Dict[str, float]] = None
    custom_measurements: List[Dict[str, float]] = None

    def __post_init__(self):
        self.windows = self.windows or []
        self.doors = self.doors or []
        self.custom_measurements = self.custom_measurements or []

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–ª–æ—â–∞–¥–∏
class AreaCalculatorStates(StatesGroup):
    waiting_for_room_type = State()
    waiting_for_room_shape = State()
    waiting_for_length = State()
    waiting_for_width = State()
    waiting_for_height = State()
    waiting_for_diameter = State()
    waiting_for_windows = State()
    waiting_for_doors = State()
    waiting_for_custom_measurements = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞
class BudgetCalculatorStates(StatesGroup):
    waiting_for_budget = State()
    waiting_for_material = State()

class MaterialCalculatorStates(StatesGroup):
    waiting_for_area = State()
    waiting_for_material_type = State()
    waiting_for_discount = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è AI —á–∞—Ç–∞
class AIStates(StatesGroup):
    waiting_for_question = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    logging.critical("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í—ã—Ö–æ–¥.")
    exit(1)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å FSM —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ JSON
with open("materials.json", "r", encoding="utf-8") as file:
    materials = json.load(file)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"), KeyboardButton(text="üìê –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–ª–æ—â–∞–¥–∏")],
        [KeyboardButton(text="üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞"), KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏")],
        [KeyboardButton(text="üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"), KeyboardButton(text="ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è
def get_room_type_keyboard():
    buttons = []
    room_types = list(RoomType)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
    for i in range(0, len(room_types), 2):
        row = []
        row.append(KeyboardButton(text=room_types[i].value))
        if i + 1 < len(room_types):
            row.append(KeyboardButton(text=room_types[i + 1].value))
        buttons.append(row)
        
    buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º—ã –ø–æ–º–µ—â–µ–Ω–∏—è
def get_room_shape_keyboard():
    buttons = []
    shapes = list(RoomShape)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
    for i in range(0, len(shapes), 2):
        row = []
        row.append(KeyboardButton(text=shapes[i].value))
        if i + 1 < len(shapes):
            row.append(KeyboardButton(text=shapes[i + 1].value))
        buttons.append(row)
        
    buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø StroyHelper –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–ª–æ—â–∞–¥–∏"
@dp.message(F.text == "üìê –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–ª–æ—â–∞–¥–∏")
async def area_calculator_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è:",
        reply_markup=get_room_type_keyboard()
    )
    await state.set_state(AreaCalculatorStates.waiting_for_room_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è
@dp.message(AreaCalculatorStates.waiting_for_room_type)
async def process_room_type(message: types.Message, state: FSMContext):
    try:
        room_type = next(rt for rt in RoomType if rt.value == message.text)
        await state.update_data(room_type=room_type.name)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–º–µ—â–µ–Ω–∏—è:",
            reply_markup=get_room_shape_keyboard()
        )
        await state.set_state(AreaCalculatorStates.waiting_for_room_shape)
    except StopIteration:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º—ã –ø–æ–º–µ—â–µ–Ω–∏—è
@dp.message(AreaCalculatorStates.waiting_for_room_shape)
async def process_room_shape(message: types.Message, state: FSMContext):
    try:
        room_shape = next(rs for rs in RoomShape if rs.value == message.text)
        await state.update_data(room_shape=room_shape.name)

        if room_shape == RoomShape.CIRCULAR:
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–º–µ—Ç—Ä –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.set_state(AreaCalculatorStates.waiting_for_diameter)
        else:
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.set_state(AreaCalculatorStates.waiting_for_length)
    except StopIteration:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–º–µ—â–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–ª–∏–Ω—ã –ø–æ–º–µ—â–µ–Ω–∏—è
@dp.message(AreaCalculatorStates.waiting_for_length)
async def process_length(message: types.Message, state: FSMContext):
    try:
        length = float(message.text)
        if length <= 0:
            raise ValueError("–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

        await state.update_data(length=length)
        data = await state.get_data()

        if data["room_shape"] == RoomShape.SQUARE.name:
            await state.update_data(width=length)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –ø–æ—Ç–æ–ª–∫–æ–≤ –≤ –º–µ—Ç—Ä–∞—Ö:")
            await state.set_state(AreaCalculatorStates.waiting_for_height)
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö:")
            await state.set_state(AreaCalculatorStates.waiting_for_width)
    except ValueError as e:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —à–∏—Ä–∏–Ω—ã –ø–æ–º–µ—â–µ–Ω–∏—è
@dp.message(AreaCalculatorStates.waiting_for_width)
async def process_width(message: types.Message, state: FSMContext):
    try:
        width = float(message.text)
        if width <= 0:
            raise ValueError("–®–∏—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

        await state.update_data(width=width)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –ø–æ—Ç–æ–ª–∫–æ–≤ –≤ –º–µ—Ç—Ä–∞—Ö:")
        await state.set_state(AreaCalculatorStates.waiting_for_height)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—ã—Å–æ—Ç—ã –ø–æ–º–µ—â–µ–Ω–∏—è
@dp.message(AreaCalculatorStates.waiting_for_height)
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = float(message.text)
        if height <= 0:
            raise ValueError("–í—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

        data = await state.get_data()
        await state.update_data(height=height)

        # –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ –∏ –æ–±—ä–µ–º–∞
        if data["room_shape"] == RoomShape.RECTANGULAR.name or data["room_shape"] == RoomShape.SQUARE.name:
            length = data["length"]
            width = data["width"]
            floor_area = length * width
            wall_area = 2 * (length + width) * height
            volume = floor_area * height

            result = (
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:\n\n"
                f"üìè –ü–ª–æ—â–∞–¥—å –ø–æ–ª–∞: {floor_area:.2f} –º¬≤\n"
                f"üèó –ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω (–±–µ–∑ —É—á–µ—Ç–∞ –æ–∫–æ–Ω –∏ –¥–≤–µ—Ä–µ–π): {wall_area:.2f} –º¬≤\n"
                f"üì¶ –û–±—ä–µ–º –ø–æ–º–µ—â–µ–Ω–∏—è: {volume:.2f} –º¬≥\n\n"
                f"‚ùì –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –æ–∫–æ–Ω –∏ –¥–≤–µ—Ä–µ–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞?"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞", callback_data="add_openings")],
                [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="skip_openings")]
            ])

            await message.answer(result, reply_markup=keyboard)
        elif data["room_shape"] == RoomShape.CIRCULAR.name:
            diameter = data["diameter"]
            radius = diameter / 2
            floor_area = 3.14159 * radius * radius
            wall_area = 3.14159 * diameter * height
            volume = floor_area * height

            result = (
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –∫—Ä—É–≥–ª–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è:\n\n"
                f"üìè –ü–ª–æ—â–∞–¥—å –ø–æ–ª–∞: {floor_area:.2f} –º¬≤\n"
                f"üèó –ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω (–±–µ–∑ —É—á–µ—Ç–∞ –æ–∫–æ–Ω –∏ –¥–≤–µ—Ä–µ–π): {wall_area:.2f} –º¬≤\n"
                f"üì¶ –û–±—ä–µ–º –ø–æ–º–µ—â–µ–Ω–∏—è: {volume:.2f} –º¬≥\n\n"
                f"‚ùì –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –æ–∫–æ–Ω –∏ –¥–≤–µ—Ä–µ–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞?"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞", callback_data="add_openings")],
                [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="skip_openings")]
            ])

            await message.answer(result, reply_markup=keyboard)

        await state.set_state(AreaCalculatorStates.waiting_for_windows)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–∫–æ–Ω –∏ –¥–≤–µ—Ä–µ–π
@dp.callback_query(lambda c: c.data == "add_openings")
async def process_add_openings(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏ (–µ—Å–ª–∏ –æ–∫–æ–Ω –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ 0):"
    )
    await state.set_state(AreaCalculatorStates.waiting_for_windows)

@dp.callback_query(lambda c: c.data == "skip_openings")
async def process_skip_openings(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        "–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∏–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∫—Ä—É–≥–ª–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è
@dp.message(AreaCalculatorStates.waiting_for_diameter)
async def process_diameter(message: types.Message, state: FSMContext):
    try:
        diameter = float(message.text)
        if diameter <= 0:
            raise ValueError("–î–∏–∞–º–µ—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

        await state.update_data(diameter=diameter)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –ø–æ—Ç–æ–ª–∫–æ–≤ –≤ –º–µ—Ç—Ä–∞—Ö:")
        await state.set_state(AreaCalculatorStates.waiting_for_height)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
@dp.message(F.text == "üìã –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def materials_button(message: types.Message):
    await message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=get_categories_keyboard())

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞
@dp.message(F.text == "üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞")
async def budget_calculator(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö:", reply_markup=keyboard)
    await state.set_state(BudgetCalculatorStates.waiting_for_budget)

@dp.message(BudgetCalculatorStates.waiting_for_budget)
async def process_budget(message: types.Message, state: FSMContext):
    try:
        budget = float(message.text)
        suggestions = []
        for category in materials:
            for subcategory in materials[category]:
                if "price" in materials[category][subcategory]:
                    price = materials[category][subcategory]["price"]
                    if price <= budget:
                        suggestions.append(f"{category} - {subcategory}: {price} —Ä—É–±.")

        if suggestions:
            response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞:\n\n" + "\n".join(suggestions)
        else:
            response = "–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        await message.answer(response)
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("category:"))
async def category_callback(callback: types.CallbackQuery):
    category = callback.data.split(":")[1]
    await callback.answer()
    await callback.message.edit_text(
        f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_subcategories_keyboard(category)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("subcategory:"))
async def subcategory_callback(callback: types.CallbackQuery):
    _, category, subcategory = callback.data.split(":")
    await callback.answer()
    await callback.message.edit_text(
        f"üîπ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory}\n–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:",
        reply_markup=get_brands_keyboard(category, subcategory)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞
@dp.callback_query(F.data.startswith("brand:"))
async def brand_callback(callback: types.CallbackQuery):
    _, category, subcategory, brand = callback.data.split(":")
    info = materials[category][subcategory]
    price = info.get("price", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    description = info.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    response = (
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ:\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
        f"<b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {subcategory}\n"
        f"<b>–ë—Ä–µ–Ω–¥:</b> {brand}\n"
        f"<b>–¶–µ–Ω–∞:</b> {price} —Ä—É–±.\n\n"
        f"üì¶ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {description}"
    )
    await callback.answer()
    await callback.message.edit_text(response, parse_mode="HTML")

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query(F.data == "back_to_categories")
async def back_to_categories_callback(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=get_categories_keyboard())

@dp.callback_query(F.data.startswith("back_to_subcategories:"))
async def back_to_subcategories_callback(callback: types.CallbackQuery):
    _, category = callback.data.split(":")
    await callback.answer()
    await callback.message.edit_text(
        f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_subcategories_keyboard(category)
    )

@dp.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def get_categories_keyboard():
    buttons = []
    categories = list(materials.keys())
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
    for i in range(0, len(categories), 2):
        row = []
        row.append(InlineKeyboardButton(text=categories[i], callback_data=f"category:{categories[i]}"))
        if i + 1 < len(categories):
            row.append(InlineKeyboardButton(text=categories[i + 1], callback_data=f"category:{categories[i + 1]}"))
        buttons.append(row)
        
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
def get_subcategories_keyboard(category):
    buttons = []
    for subcategory in materials[category]:
        buttons.append([InlineKeyboardButton(text=subcategory, callback_data=f"subcategory:{category}:{subcategory}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories")])
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—Ä–µ–Ω–¥–æ–≤
def get_brands_keyboard(category, subcategory):
    buttons = []
    for brand in materials[category][subcategory]["brands"]:
        buttons.append([InlineKeyboardButton(text=brand, callback_data=f"brand:{category}:{subcategory}:{brand}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_subcategories:{category}")])
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AI –ø–æ–º–æ—â–Ω–∏–∫–∞
ai_helper = AIHelper()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
@dp.message(F.text == "üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫")
async def shopping_list_menu(message: types.Message, state: FSMContext):
    await shopping_list.show_lists_menu(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
@dp.message(shopping_list.ShoppingListStates.waiting_for_quantity)
async def handle_quantity(message: types.Message, state: FSMContext):
    await shopping_list.process_quantity(message, state)

@dp.message(shopping_list.ShoppingListStates.waiting_for_list_name)
async def handle_list_name(message: types.Message, state: FSMContext):
    await shopping_list.process_list_name(message, state)

@dp.message(F.text == "ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫")
async def ai_helper_start(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    await message.answer(
        "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- –ö–∞–∫–æ–π –ª–∞–º–∏–Ω–∞—Ç –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –∫—É—Ö–Ω–∏?\n"
        "- –ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –∫–µ—Ä–∞–º–æ–≥—Ä–∞–Ω–∏—Ç –æ—Ç –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–π –ø–ª–∏—Ç–∫–∏?\n"
        "- –ö–∞–∫–∞—è –∫—Ä–∞—Å–∫–∞ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã?",
        reply_markup=keyboard
    )
    await state.set_state(AIStates.waiting_for_question)

@dp.message(AIStates.waiting_for_question)
async def process_ai_question(message: types.Message, state: FSMContext):
    await message.answer("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    response = await ai_helper.get_response(message.text)
    await message.answer(response)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –º–æ–¥—É–ª—å shopping_list

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
        dp.include_router(shopping_list.router)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
        if not API_TOKEN:
            logging.critical("API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")
            exit(1)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON —Ñ–∞–π–ª–æ–≤
        if not os.path.exists("materials.json"):
            logging.warning("–§–∞–π–ª materials.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª.")
            with open("materials.json", "w", encoding="utf-8") as f:
                json.dump({}, f, ensure_ascii=False, indent=4)
        
        if not os.path.exists(shopping_list.SHOPPING_LIST_FILE):
            logging.info(f"–§–∞–π–ª {shopping_list.SHOPPING_LIST_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª.")
            with open(shopping_list.SHOPPING_LIST_FILE, "w", encoding="utf-8") as f:
                json.dump({}, f, ensure_ascii=False, indent=4)
        
        # Clear any existing webhook and drop pending updates
        logging.info("–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ webhook –∏ —Å–±—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        await bot.delete_webhook(drop_pending_updates=True)
        
        # Set allowed_updates to empty list to minimize conflicts
        logging.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞...")
        await dp.start_polling(bot, allowed_updates=[])
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        exit(1)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
@dp.message(F.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
async def material_calculator_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
            resize_keyboard=True
        )
    )
    await state.set_state(MaterialCalculatorStates.waiting_for_area)

@dp.message(MaterialCalculatorStates.waiting_for_area)
async def process_area(message: types.Message, state: FSMContext):
    try:
        area = float(message.text)
        if area <= 0:
            raise ValueError("–ü–ª–æ—â–∞–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        await state.update_data(area=area)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
        material_buttons = []
        for category in materials:
            for material in materials[category]:
                if "price" in materials[category][material]:
                    material_buttons.append([KeyboardButton(text=f"{category} - {material}")])
        
        material_buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
        material_keyboard = ReplyKeyboardMarkup(keyboard=material_buttons, resize_keyboard=True)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:",
            reply_markup=material_keyboard
        )
        await state.set_state(MaterialCalculatorStates.waiting_for_material_type)
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

@dp.message(MaterialCalculatorStates.waiting_for_material_type)
async def process_material_type(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await back_to_menu(message, state)
        return

    try:
        category, material = message.text.split(" - ")
        data = await state.get_data()
        area = data["area"]
        
        material_info = materials[category][material]
        price = material_info["price"]
        
        calculator = MaterialCalculation(
            area=area,
            price_per_unit=price,
            unit=MaterialUnit.SQUARE_METER
        )
        
        result = calculator.calculate()
        
        response = (
            f"üìä –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:\n\n"
            f"üèó –ú–∞—Ç–µ—Ä–∏–∞–ª: {material}\n"
            f"üìè –ü–ª–æ—â–∞–¥—å: {area} –º¬≤\n"
            f"üíµ –¶–µ–Ω–∞ –∑–∞ –º¬≤: {price} —Ä—É–±\n"
            f"üì¶ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {result['amount']} –º¬≤\n"
            f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result['total_cost']} —Ä—É–±\n\n"
            f"* –£—á—Ç–µ–Ω –∑–∞–ø–∞—Å {calculator.waste_percent}% –Ω–∞ –ø–æ–¥—Ä–µ–∑–∫—É"
        )
        
        await message.answer(response, reply_markup=keyboard)
        await state.clear()
        
    except (ValueError, KeyError):
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=keyboard
        )
        await state.clear()

if __name__ == "__main__":
    asyncio.run(main())