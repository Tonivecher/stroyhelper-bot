import logging
import asyncio
import os
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from ai_helper import AIHelper

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤ –ø–ª–æ—â–∞–¥–∏ –∏ –±—é–¥–∂–µ—Ç–∞
class CalcStates(StatesGroup):
    waiting_for_length = State()
    waiting_for_width = State()
    waiting_for_material = State()
    waiting_for_budget = State()

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è AI —á–∞—Ç–∞
class AIStates(StatesGroup):
    waiting_for_question = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    logging.critical("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í—ã—Ö–æ–¥.")
    exit(1)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å FSM —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ JSON
with open("materials.json", "r", encoding="utf-8") as file:
    materials = json.load(file)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")],
        [KeyboardButton(text="üìê –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–ª–æ—â–∞–¥–∏")],
        [KeyboardButton(text="üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞")],
        [KeyboardButton(text="ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def get_categories_keyboard():
    buttons = []
    for category in materials:
        buttons.append([InlineKeyboardButton(text=category, callback_data=f"category:{category}")])
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
def get_subcategories_keyboard(category):
    buttons = []
    for subcategory in materials[category]:
        buttons.append([InlineKeyboardButton(text=subcategory, callback_data=f"subcategory:{category}:{subcategory}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories")])
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—Ä–µ–Ω–¥–æ–≤
def get_brands_keyboard(category, subcategory):
    buttons = []
    for brand in materials[category][subcategory]["brands"]:
        buttons.append([InlineKeyboardButton(text=brand, callback_data=f"brand:{category}:{subcategory}:{brand}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_subcategories:{category}")])
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø StroyHelper –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
@dp.message(F.text == "üìã –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def materials_button(message: types.Message):
    await message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=get_categories_keyboard())

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–ª–æ—â–∞–¥–∏
@dp.message(F.text == "üìê –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–ª–æ—â–∞–¥–∏")
async def area_calculator(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö:")
    await state.set_state(CalcStates.waiting_for_length)

@dp.message(CalcStates.waiting_for_length)
async def process_length(message: types.Message, state: FSMContext):
    try:
        length = float(message.text)
        await state.update_data(length=length)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö:")
        await state.set_state(CalcStates.waiting_for_width)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

@dp.message(CalcStates.waiting_for_width)
async def process_width(message: types.Message, state: FSMContext):
    try:
        width = float(message.text)
        data = await state.get_data()
        length = data.get("length")
        area = length * width
        await message.answer(f"–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è: {area:.2f} –º¬≤")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞
@dp.message(F.text == "üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞")
async def budget_calculator(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö:")
    await state.set_state(CalcStates.waiting_for_budget)

@dp.message(CalcStates.waiting_for_budget)
async def process_budget(message: types.Message, state: FSMContext):
    try:
        budget = float(message.text)
        suggestions = []
        for category in materials:
            for subcategory in materials[category]:
                if "price" in materials[category][subcategory]:
                    price = materials[category][subcategory]["price"]
                    if price <= budget:
                        suggestions.append(f"{category} - {subcategory}: {price} —Ä—É–±.")

        if suggestions:
            response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞:\n\n" + "\n".join(suggestions)
        else:
            response = "–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        await message.answer(response)
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("category:"))
async def category_callback(callback: types.CallbackQuery):
    category = callback.data.split(":")[1]
    await callback.answer()
    await callback.message.edit_text(
        f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_subcategories_keyboard(category)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("subcategory:"))
async def subcategory_callback(callback: types.CallbackQuery):
    _, category, subcategory = callback.data.split(":")
    await callback.answer()
    await callback.message.edit_text(
        f"üîπ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory}\n–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:",
        reply_markup=get_brands_keyboard(category, subcategory)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞
@dp.callback_query(F.data.startswith("brand:"))
async def brand_callback(callback: types.CallbackQuery):
    _, category, subcategory, brand = callback.data.split(":")
    info = materials[category][subcategory]
    price = info.get("price", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    description = info.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    response = (
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ:\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
        f"<b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {subcategory}\n"
        f"<b>–ë—Ä–µ–Ω–¥:</b> {brand}\n"
        f"<b>–¶–µ–Ω–∞:</b> {price} —Ä—É–±.\n\n"
        f"üì¶ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {description}"
    )
    await callback.answer()
    await callback.message.edit_text(response, parse_mode="HTML")

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query(F.data == "back_to_categories")
async def back_to_categories_callback(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=get_categories_keyboard())

@dp.callback_query(F.data.startswith("back_to_subcategories:"))
async def back_to_subcategories_callback(callback: types.CallbackQuery):
    _, category = callback.data.split(":")
    await callback.answer()
    await callback.message.edit_text(
        f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_subcategories_keyboard(category)
    )

@dp.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AI –ø–æ–º–æ—â–Ω–∏–∫–∞
ai_helper = AIHelper()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è AI –ø–æ–º–æ—â–Ω–∏–∫–∞
@dp.message(F.text == "ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫")
async def ai_helper_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- –ö–∞–∫–æ–π –ª–∞–º–∏–Ω–∞—Ç –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –∫—É—Ö–Ω–∏?\n"
        "- –ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –∫–µ—Ä–∞–º–æ–≥—Ä–∞–Ω–∏—Ç –æ—Ç –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–π –ø–ª–∏—Ç–∫–∏?\n"
        "- –ö–∞–∫–∞—è –∫—Ä–∞—Å–∫–∞ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã?"
    )
    await state.set_state(AIStates.waiting_for_question)

@dp.message(AIStates.waiting_for_question)
async def process_ai_question(message: types.Message, state: FSMContext):
    await message.answer("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    response = await ai_helper.get_response(message.text)
    await message.answer(response)
    await state.clear()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())