import json
import os
from aiogram import Router, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command

router = Router()

SHOPPING_LIST_FILE = "shopping_list.json"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
def load_shopping_list():
    if not os.path.exists(SHOPPING_LIST_FILE):
        return {}
    with open(SHOPPING_LIST_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
def save_shopping_list(data):
    with open(SHOPPING_LIST_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫
def add_to_list(user_id, item):
    data = load_shopping_list()
    user_id = str(user_id)
    if user_id not in data:
        data[user_id] = []
    if item not in data[user_id]:
        data[user_id].append(item)
    save_shopping_list(data)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
def get_list(user_id):
    data = load_shopping_list()
    return data.get(str(user_id), [])

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
def remove_from_list(user_id, item):
    data = load_shopping_list()
    user_id = str(user_id)
    if user_id in data and item in data[user_id]:
        data[user_id].remove(item)
        if not data[user_id]:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del data[user_id]
        save_shopping_list(data)

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
def clear_list(user_id):
    data = load_shopping_list()
    user_id = str(user_id)
    if user_id in data:
        del data[user_id]
        save_shopping_list(data)

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
@router.message(Command("shopping_list"))
async def cmd_shopping_list(message: Message):
    items = get_list(message.from_user.id)
    if not items:
        await message.reply("üõí –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.")
        return
    text = "üõí –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n" + "\n".join(f"‚Ä¢ {item}" for item in items)
    
    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞
    clear_button = InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="clear_list")
    keyboard = InlineKeyboardMarkup().add(clear_button)
    
    await message.reply(text, reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
@router.message(Command("add_to_list"))
async def cmd_add_to_list(message: Message):
    items = ["–ö–ª–µ–π", "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞", "–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω", "–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –ø–ª–∏—Ç–∫–∞", "–õ–∞–º–∏–Ω–∞—Ç"]
    buttons = [InlineKeyboardButton(item, callback_data=f"add_{item}") for item in items]
    keyboard = InlineKeyboardMarkup(row_width=2).add(*buttons)
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
@router.callback_query(lambda c: c.data.startswith("add_"))
async def process_add_to_list(callback_query: types.CallbackQuery):
    item = callback_query.data.split("add_")[1]
    add_to_list(callback_query.from_user.id, item)
    await callback_query.answer(f"‚úÖ {item} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫!", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞
@router.callback_query(lambda c: c.data == "clear_list")
async def process_clear_list(callback_query: types.CallbackQuery):
    clear_list(callback_query.from_user.id)
    await callback_query.answer("üóë –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ—á–∏—â–µ–Ω.", show_alert=True)

# –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
@router.message(Command("remove_from_list"))
async def cmd_remove_from_list(message: Message):
    items = get_list(message.from_user.id)
    if not items:
        await message.reply("–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.")
        return
    buttons = [InlineKeyboardButton(item, callback_data=f"remove_{item}") for item in items]
    keyboard = InlineKeyboardMarkup(row_width=2).add(*buttons)
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
@router.callback_query(lambda c: c.data.startswith("remove_"))
async def process_remove_from_list(callback_query: types.CallbackQuery):
    item = callback_query.data.split("remove_")[1]
    remove_from_list(callback_query.from_user.id, item)
    await callback_query.answer(f"‚ùå {item} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.", show_alert=True)