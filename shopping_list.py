
import json
import os
import logging
from aiogram import Router, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

router = Router()

SHOPPING_LIST_FILE = "shopping_list.json"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫
class ShoppingListStates(StatesGroup):
    waiting_for_quantity = State()
    waiting_for_unit = State()
    waiting_for_list_name = State()
    selecting_list = State()

# –°–ª–æ–≤–∞—Ä—å —Å —Ç–∏–ø–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
MATERIAL_UNITS = {
    "–ö–ª–µ–π": "–º–µ—à–∫–æ–≤",
    "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞": "–º–µ—à–∫–æ–≤",
    "–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω": "–ª–∏—Å—Ç–æ–≤",
    "–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –ø–ª–∏—Ç–∫–∞": "–º¬≤",
    "–õ–∞–º–∏–Ω–∞—Ç": "–º¬≤",
    "–ö–µ—Ä–∞–º–æ–≥—Ä–∞–Ω–∏—Ç": "–º¬≤",
    "–ö—Ä–∞—Å–∫–∞": "–±–∞–Ω–æ–∫",
    "–û–±–æ–∏": "—Ä—É–ª–æ–Ω–æ–≤"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫
def load_shopping_list():
    if not os.path.exists(SHOPPING_LIST_FILE):
        return {}
    try:
        with open(SHOPPING_LIST_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            for user_id in data:
                if isinstance(data[user_id], list):
                    data[user_id] = {"lists": {}}
            return data
    except json.JSONDecodeError:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON, –≤–µ—Ä–Ω–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        return {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫
def save_shopping_list(data):
    with open(SHOPPING_LIST_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫
def add_to_list(user_id, list_name, item, quantity=None, unit=None):
    data = load_shopping_list()
    user_id = str(user_id)
    
    if user_id not in data:
        data[user_id] = {"lists": {}}
    
    if "lists" not in data[user_id]:
        data[user_id]["lists"] = {}
    
    if list_name not in data[user_id]["lists"]:
        data[user_id]["lists"][list_name] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ
    existing_item = None
    for i, entry in enumerate(data[user_id]["lists"][list_name]):
        if isinstance(entry, dict) and entry.get("item") == item:
            existing_item = i
            break
        elif entry == item:
            existing_item = i
            break
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    if quantity and unit:
        item_data = {"item": item, "quantity": quantity, "unit": unit}
        if existing_item is not None:
            data[user_id]["lists"][list_name][existing_item] = item_data
        else:
            data[user_id]["lists"][list_name].append(item_data)
    else:
        if existing_item is None:
            data[user_id]["lists"][list_name].append(item)
    
    save_shopping_list(data)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_lists(user_id):
    data = load_shopping_list()
    user_id = str(user_id)
    
    if user_id not in data:
        return {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data[user_id] - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
    if isinstance(data[user_id], list):
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å
        data[user_id] = {"lists": {}}
        save_shopping_list(data)
    
    if "lists" not in data[user_id]:
        data[user_id]["lists"] = {}
        save_shopping_list(data)
    
    return data[user_id]["lists"]

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
def get_list(user_id, list_name):
    data = load_shopping_list()
    user_id = str(user_id)
    
    if user_id not in data or "lists" not in data[user_id] or list_name not in data[user_id]["lists"]:
        return []
    
    return data[user_id]["lists"][list_name]

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
def create_list(user_id, list_name):
    data = load_shopping_list()
    user_id = str(user_id)
    
    if user_id not in data:
        data[user_id] = {"lists": {}}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data[user_id] - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
    if isinstance(data[user_id], list):
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å
        data[user_id] = {"lists": {}}
    
    if "lists" not in data[user_id]:
        data[user_id]["lists"] = {}
    
    if list_name not in data[user_id]["lists"]:
        data[user_id]["lists"][list_name] = []
        save_shopping_list(data)
        return True
    
    return False

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
def remove_from_list(user_id, list_name, item):
    data = load_shopping_list()
    user_id = str(user_id)
    
    if user_id in data and "lists" in data[user_id] and list_name in data[user_id]["lists"]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
        for i, entry in enumerate(data[user_id]["lists"][list_name]):
            if isinstance(entry, dict) and entry.get("item") == item:
                data[user_id]["lists"][list_name].pop(i)
                break
            elif entry == item:
                data[user_id]["lists"][list_name].pop(i)
                break
        
        save_shopping_list(data)

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
def delete_list(user_id, list_name):
    data = load_shopping_list()
    user_id = str(user_id)
    
    if user_id in data and "lists" in data[user_id] and list_name in data[user_id]["lists"]:
        del data[user_id]["lists"][list_name]
        save_shopping_list(data)
        return True
    
    return False

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
def clear_list(user_id, list_name):
    data = load_shopping_list()
    user_id = str(user_id)
    
    if user_id in data and "lists" in data[user_id] and list_name in data[user_id]["lists"]:
        data[user_id]["lists"][list_name] = []
        save_shopping_list(data)
        return True
    
    return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
@router.message(Command("shopping_list"))
async def cmd_shopping_list(message: Message, state: FSMContext):
    await show_lists_menu(message, state)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–∞–º–∏
async def show_lists_menu(message: Message, state: FSMContext = None):
    user_lists = get_user_lists(message.from_user.id)
    
    buttons = []
    if user_lists:
        for list_name in user_lists:
            buttons.append([InlineKeyboardButton(text=f"üìã {list_name}", callback_data=f"open_list:{list_name}")])
    
    buttons.append([InlineKeyboardButton(text="‚ú® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫", callback_data="create_new_list")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer("üõí –í–∞—à–∏ —Å–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
@router.callback_query(lambda c: c.data == "create_new_list")
async def process_create_list(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫:")
    await state.set_state(ShoppingListStates.waiting_for_list_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞
@router.message(ShoppingListStates.waiting_for_list_name)
async def process_list_name(message: Message, state: FSMContext):
    list_name = message.text.strip()
    
    if not list_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ '{list_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        current_data = load_shopping_list()
        logger.info(f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {current_data.get(str(message.from_user.id), {})}")
        
        created = create_list(message.from_user.id, list_name)
        
        if created:
            await message.answer(f"‚úÖ –°–ø–∏—Å–æ–∫ \"{list_name}\" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            await message.answer(f"‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º \"{list_name}\" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        
        await state.clear()
        await show_lists_menu(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞
@router.callback_query(lambda c: c.data and c.data.startswith("open_list:"))
async def process_open_list(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        list_name = callback_query.data.split(":")[1]
        items = get_list(callback_query.from_user.id, list_name)
        
        await callback_query.answer()
        
        if not items:
            text = f"üìã –°–ø–∏—Å–æ–∫ \"{list_name}\" –ø—É—Å—Ç."
        else:
            text = f"üìã –°–ø–∏—Å–æ–∫ \"{list_name}\":\n"
            for item in items:
                if isinstance(item, dict) and 'item' in item and 'quantity' in item and 'unit' in item:
                    text += f"‚Ä¢ {item['item']} - {item['quantity']} {item['unit']}\n"
                elif isinstance(item, str):
                    text += f"‚Ä¢ {item}\n"
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
                    text += f"‚Ä¢ [–≠–ª–µ–º–µ–Ω—Ç –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ]\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º
        buttons = [
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"add_to_list:{list_name}")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"remove_from_list:{list_name}")],
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"clear_list:{list_name}")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"delete_list:{list_name}")],
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Å–ø–∏—Å–∫–æ–≤", callback_data="back_to_lists")]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø–∏—Å–∫–∞")
        await show_lists_menu(callback_query.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫
@router.callback_query(lambda c: c.data and c.data.startswith("add_to_list:"))
async def process_add_to_list(callback_query: types.CallbackQuery, state: FSMContext):
    list_name = callback_query.data.split(":")[1]
    await state.update_data(current_list=list_name)
    
    items = list(MATERIAL_UNITS.keys())
    buttons = [[InlineKeyboardButton(text=item, callback_data=f"select_{item}")] for item in items]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"open_list:{list_name}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback_query.answer()
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Å–ø–∏—Å–∫–æ–≤
@router.callback_query(lambda c: c.data == "back_to_lists")
async def process_back_to_lists(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await show_lists_menu(callback_query.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
@router.callback_query(lambda c: c.data and c.data.startswith("select_"))
async def process_select_material(callback_query: types.CallbackQuery, state: FSMContext):
    item = callback_query.data.split("select_")[1]
    data = await state.get_data()
    list_name = data.get("current_list")
    
    await state.update_data(item=item)
    
    await callback_query.answer()
    await callback_query.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {item} (—á–∏—Å–ª–æ):")
    await state.set_state(ShoppingListStates.waiting_for_quantity)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@router.message(ShoppingListStates.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = float(message.text)
        data = await state.get_data()
        item = data["item"]
        list_name = data["current_list"]
        
        unit = MATERIAL_UNITS.get(item, "—à—Ç")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫
        add_to_list(message.from_user.id, list_name, item, quantity, unit)
        
        await message.answer(f"‚úÖ {item} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} {unit} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ \"{list_name}\"!")
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        items = get_list(message.from_user.id, list_name)
        if not items:
            text = f"üìã –°–ø–∏—Å–æ–∫ \"{list_name}\" –ø—É—Å—Ç."
        else:
            text = f"üìã –°–ø–∏—Å–æ–∫ \"{list_name}\":\n"
            for item in items:
                if isinstance(item, dict):
                    text += f"‚Ä¢ {item['item']} - {item['quantity']} {item['unit']}\n"
                else:
                    text += f"‚Ä¢ {item}\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º
        buttons = [
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"add_to_list:{list_name}")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"remove_from_list:{list_name}")],
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"clear_list:{list_name}")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"delete_list:{list_name}")],
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Å–ø–∏—Å–∫–æ–≤", callback_data="back_to_lists")]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(text, reply_markup=keyboard)
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@router.callback_query(lambda c: c.data and c.data.startswith("remove_from_list:"))
async def process_remove_from_list_menu(callback_query: types.CallbackQuery, state: FSMContext):
    list_name = callback_query.data.split(":")[1]
    items = get_list(callback_query.from_user.id, list_name)
    
    await callback_query.answer()
    
    if not items:
        await callback_query.message.edit_text(
            f"üìã –°–ø–∏—Å–æ–∫ \"{list_name}\" –ø—É—Å—Ç.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"open_list:{list_name}")]
            ])
        )
        return
    
    buttons = []
    for item in items:
        if isinstance(item, dict):
            item_text = f"{item['item']} - {item['quantity']} {item['unit']}"
            buttons.append([InlineKeyboardButton(text=item_text, callback_data=f"remove_item:{list_name}:{item['item']}")])
        else:
            buttons.append([InlineKeyboardButton(text=item, callback_data=f"remove_item:{list_name}:{item}")])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"open_list:{list_name}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback_query.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ \"{list_name}\":", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(lambda c: c.data and c.data.startswith("remove_item:"))
async def process_remove_item(callback_query: types.CallbackQuery, state: FSMContext):
    _, list_name, item = callback_query.data.split(":", 2)
    
    remove_from_list(callback_query.from_user.id, list_name, item)
    
    await callback_query.answer(f"‚ùå {item} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    items = get_list(callback_query.from_user.id, list_name)
    if not items:
        text = f"üìã –°–ø–∏—Å–æ–∫ \"{list_name}\" –ø—É—Å—Ç."
    else:
        text = f"üìã –°–ø–∏—Å–æ–∫ \"{list_name}\":\n"
        for item in items:
            if isinstance(item, dict):
                text += f"‚Ä¢ {item['item']} - {item['quantity']} {item['unit']}\n"
            else:
                text += f"‚Ä¢ {item}\n"
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"add_to_list:{list_name}")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"remove_from_list:{list_name}")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"clear_list:{list_name}")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"delete_list:{list_name}")],
        [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Å–ø–∏—Å–∫–æ–≤", callback_data="back_to_lists")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback_query.message.edit_text(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞
@router.callback_query(lambda c: c.data and c.data.startswith("clear_list:"))
async def process_clear_list(callback_query: types.CallbackQuery, state: FSMContext):
    list_name = callback_query.data.split(":")[1]
    cleared = clear_list(callback_query.from_user.id, list_name)
    
    if cleared:
        await callback_query.answer(f"üóë –°–ø–∏—Å–æ–∫ \"{list_name}\" –æ—á–∏—â–µ–Ω.")
    else:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    text = f"üìã –°–ø–∏—Å–æ–∫ \"{list_name}\" –ø—É—Å—Ç."
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"add_to_list:{list_name}")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"delete_list:{list_name}")],
        [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Å–ø–∏—Å–∫–æ–≤", callback_data="back_to_lists")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback_query.message.edit_text(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
@router.callback_query(lambda c: c.data and c.data.startswith("delete_list:"))
async def process_delete_list(callback_query: types.CallbackQuery, state: FSMContext):
    list_name = callback_query.data.split(":")[1]
    deleted = delete_list(callback_query.from_user.id, list_name)
    
    if deleted:
        await callback_query.answer(f"‚ùå –°–ø–∏—Å–æ–∫ \"{list_name}\" —É–¥–∞–ª–µ–Ω.")
    else:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.")
    
    await show_lists_menu(callback_query.message)
