
import json
import os
from aiogram import Router, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()

SHOPPING_LIST_FILE = "shopping_list.json"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
class ShoppingListStates(StatesGroup):
    waiting_for_quantity = State()
    waiting_for_unit = State()

# –°–ª–æ–≤–∞—Ä—å —Å —Ç–∏–ø–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
MATERIAL_UNITS = {
    "–ö–ª–µ–π": "–º–µ—à–∫–æ–≤",
    "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞": "–º–µ—à–∫–æ–≤",
    "–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω": "–ª–∏—Å—Ç–æ–≤",
    "–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –ø–ª–∏—Ç–∫–∞": "–º¬≤",
    "–õ–∞–º–∏–Ω–∞—Ç": "–º¬≤",
    "–ö–µ—Ä–∞–º–æ–≥—Ä–∞–Ω–∏—Ç": "–º¬≤",
    "–ö—Ä–∞—Å–∫–∞": "–±–∞–Ω–æ–∫",
    "–û–±–æ–∏": "—Ä—É–ª–æ–Ω–æ–≤"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
def load_shopping_list():
    if not os.path.exists(SHOPPING_LIST_FILE):
        return {}
    with open(SHOPPING_LIST_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
def save_shopping_list(data):
    with open(SHOPPING_LIST_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫
def add_to_list(user_id, item, quantity=None, unit=None):
    data = load_shopping_list()
    user_id = str(user_id)
    if user_id not in data:
        data[user_id] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ
    existing_item = None
    for i, entry in enumerate(data.get(user_id, [])):
        if isinstance(entry, dict) and entry.get("item") == item:
            existing_item = i
            break
        elif entry == item:
            existing_item = i
            break
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    if quantity and unit:
        item_data = {"item": item, "quantity": quantity, "unit": unit}
        if existing_item is not None:
            data[user_id][existing_item] = item_data
        else:
            data[user_id].append(item_data)
    else:
        if existing_item is None:
            data[user_id].append(item)
    
    save_shopping_list(data)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
def get_list(user_id):
    data = load_shopping_list()
    return data.get(str(user_id), [])

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
def remove_from_list(user_id, item):
    data = load_shopping_list()
    user_id = str(user_id)
    if user_id in data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
        for i, entry in enumerate(data[user_id]):
            if isinstance(entry, dict) and entry.get("item") == item:
                data[user_id].pop(i)
                break
            elif entry == item:
                data[user_id].pop(i)
                break
        
        if not data[user_id]:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del data[user_id]
        save_shopping_list(data)

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
def clear_list(user_id):
    data = load_shopping_list()
    user_id = str(user_id)
    if user_id in data:
        del data[user_id]
        save_shopping_list(data)

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
@router.message(Command("shopping_list"))
async def cmd_shopping_list(message: Message):
    items = get_list(message.from_user.id)
    if not items:
        await message.reply("üõí –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.")
        return
    
    text = "üõí –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n"
    for item in items:
        if isinstance(item, dict):
            text += f"‚Ä¢ {item['item']} - {item['quantity']} {item['unit']}\n"
        else:
            text += f"‚Ä¢ {item}\n"
    
    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞
    clear_button = InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="clear_list")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[clear_button]])
    
    await message.reply(text, reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
@router.message(Command("add_to_list"))
async def cmd_add_to_list(message: Message):
    items = list(MATERIAL_UNITS.keys())
    buttons = [[InlineKeyboardButton(text=item, callback_data=f"select_{item}")] for item in items]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
@router.callback_query(lambda c: c.data and c.data.startswith("select_"))
async def process_select_material(callback_query: types.CallbackQuery, state: FSMContext):
    item = callback_query.data.split("select_")[1]
    await state.update_data(item=item)
    
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {item} (—á–∏—Å–ª–æ):")
    await state.set_state(ShoppingListStates.waiting_for_quantity)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@router.message(ShoppingListStates.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = float(message.text)
        data = await state.get_data()
        item = data["item"]
        
        await state.update_data(quantity=quantity)
        
        unit = MATERIAL_UNITS.get(item, "—à—Ç")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫
        add_to_list(message.from_user.id, item, quantity, unit)
        
        await message.answer(f"‚úÖ {item} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} {unit} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫!")
        await state.clear()
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞
@router.callback_query(lambda c: c.data == "clear_list")
async def process_clear_list(callback_query: types.CallbackQuery):
    clear_list(callback_query.from_user.id)
    await callback_query.answer("üóë –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ—á–∏—â–µ–Ω.", show_alert=True)

# –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
@router.message(Command("remove_from_list"))
async def cmd_remove_from_list(message: Message):
    items = get_list(message.from_user.id)
    if not items:
        await message.reply("–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.")
        return
    
    buttons = []
    for item in items:
        if isinstance(item, dict):
            buttons.append([InlineKeyboardButton(
                text=f"{item['item']} - {item['quantity']} {item['unit']}", 
                callback_data=f"remove_{item['item']}"
            )])
        else:
            buttons.append([InlineKeyboardButton(text=item, callback_data=f"remove_{item}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
@router.callback_query(lambda c: c.data and c.data.startswith("remove_"))
async def process_remove_from_list(callback_query: types.CallbackQuery):
    item = callback_query.data.split("remove_")[1]
    remove_from_list(callback_query.from_user.id, item)
    await callback_query.answer(f"‚ùå {item} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.", show_alert=True)
